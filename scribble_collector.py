import sys, copy
from PyQt5 import QtCore, QtWidgets
from PyQt5.Qt import QLineF  # QRectF
from PyQt5.QtGui import QImage, QPixmap, QPen, QCursor  # QPainter, QBrush
from scribble_collector_UI import Ui_Form  # import from the py file generated by Qt_Designer
from math import atan, sin, cos, pi
import argparse
import json
import os
import os.path as ops
import time
# import shutil

import cv2

seq_dir = []
img_path = []

class MyWidget(QtWidgets.QWidget, Ui_Form):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.afterGenerationConfig()
        self.test()


    def afterGenerationConfig(self):
        self.frame_list = os.listdir(self.lineEdit_seq_dir.text())
        self.frame_nums = len(self.frame_list)
        self.horizontalSlider.setMaximum(self.frame_nums-1)



        # self.pushButton_clear.clicked.connect(self.clearAll)

        # self.graphicsView.scene = QtWidgets.QGraphicsScene()
        # self.graphicsView.setScene(self.graphicsView.scene)
        # self.graphicsView.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignTop)
        # self.graphicsView.setSceneRect(0, 0, 500, 500)  # fix scene size 500 500

        self.horizontalSlider.valueChanged.connect(self.updateFrame)
        self.canvas.mouseMoveEvent = self.cursorMoveEvent
        # self.graphicsView.mousePressEvent = self.cursorPressEvent
        # self.graphicsView.mousePressEvent = self.cursorPressEvent
        # self.graphicsView.mouseReleaseEvent = self.cursorReleaseEvent
        self.canvas.setMouseTracking(True)
        # self.pushButton_transform.clicked.connect(self.transformMode)
        # self.pushButton_add.clicked.connect(self.addMode)
        self.load_img()

    def test(self):
        pass
        # print(img_path)

        # self.resize(pixmap.width(), pixmap.height())

        # self.canvas.setPicture()

    def updateFrame(self):
        self.label_frame.setText('Frame: ' + str(self.horizontalSlider.value()))
        self.load_img()



    def load_img(self):
        print('load')
        img_path = self.lineEdit_seq_dir.text() + '/' + self.frame_list[self.horizontalSlider.value()]
        img = QImage(img_path)
        pixmap = QPixmap.fromImage(img.scaledToHeight(300))
        self.canvas.setPixmap(pixmap)




    def initTempVar(self):
        pass
        # self.transfm = None
        # self.ctrlPressed = False
        # self.activeEle = self.chosenEle = None
        # self.x_start = self.y_start = self.x_end = self.y_end = None
        # self.x_now = self.y_now = self.x_last = self.y_last = None
        # self.mousePressed = False

    # Callback functions
    def cursorMoveEvent(self, event):
        self.label_x.setText('x:' + str(event.x()))
        self.label_y.setText('y:' + str(event.y()))


    # def keyReleaseEvent(self, QKeyEvent):
    #     if QKeyEvent.key() == QtCore.Qt.Key_Control:
    #         self.ctrlPressed = False
    #
    # def keyPressEvent(self, QKeyEvent):
    #     if QKeyEvent.key() == QtCore.Qt.Key_Control:
    #         self.ctrlPressed = True
    #         self.textBrowser_hist.append('Ctrl - ')
    #
    # def cursorMoveEvent(self, event):
    #     self.x_last, self.y_last = self.x_now, self.y_now
    #     self.x_now, self.y_now = event.x(), event.y()
    #
    #     self.label_xy.setText('x:' + str(self.x_now) + '\ty:' + str(self.y_now))
    #
    #     self.paintElements()
    #     if self.mode == 0:  # add mode
    #         if (self.x_start is not None) and (self.y_start is not None):  # reference line painting
    #             self.paintRefLine('create')
    #             self.label_cursor.setText('Create')
    #
    #     elif self.mode == 1:  # transform mode
    #         if self.transfm is None:
    #             self.activeEle = self.whichElementCenter(self.x_now, self.y_now)
    #         else:
    #             self.activeEle = None
    #         if self.chosenEle is not None:
    #             '''when a rectangle have been chosen'''
    #
    #             # Transform: translate
    #             if (self.isCursorOnCenter() and self.mousePressed is False) or (
    #                     self.transfm == 'translate start' and self.mousePressed):
    #                 self.graphicsView.viewport().setProperty("cursor", QCursor(QtCore.Qt.SizeAllCursor))
    #                 self.label_cursor.setText('Translation')
    #                 if self.transfm == 'translate start':
    #                     self.paintRefLine('translate')
    #             else:
    #                 '''Transform: Scale or Project'''
    #
    #                 whichVertex = self.CursorPosOnVertex()
    #                 if (whichVertex in ['LU', 'RD', 'LD', 'RU'] and self.mousePressed is False) or (
    #                         self.transfm == 'scale start' and self.mousePressed) or (
    #                         self.transfm == 'project start' and self.mousePressed):
    #
    #                     # Transform: Project
    #                     if self.ctrlPressed:
    #                         self.graphicsView.viewport().setProperty("cursor", QCursor(QtCore.Qt.PointingHandCursor))
    #                         self.label_cursor.setText('Projection')
    #                         if self.transfm == 'project start':
    #                             self.paintRefLine('project')
    #
    #                     # Transform: Scale
    #                     else:
    #                         if whichVertex in ['LU', 'RD']:
    #                             self.graphicsView.viewport().setProperty("cursor", QCursor(QtCore.Qt.SizeFDiagCursor))
    #                         elif whichVertex in ['LD', 'RU']:
    #                             self.graphicsView.viewport().setProperty("cursor", QCursor(QtCore.Qt.SizeBDiagCursor))
    #                         self.label_cursor.setText('Scaling')
    #                         if self.transfm == 'scale start':
    #                             self.paintRefLine('scale')
    #
    #                 # Transform: Rotate
    #                 elif (self.isCursorAroundVertex() and self.mousePressed is False) or (
    #                         self.transfm == 'rotate start' and self.mousePressed):
    #                     self.graphicsView.viewport().setProperty("cursor", QCursor(QtCore.Qt.OpenHandCursor))
    #                     self.label_cursor.setText('Rotation')
    #                     if self.transfm == 'rotate start':
    #                         self.paintRefLine('rotate')
    #
    #                 # Transform: Affine
    #                 elif (self.CursorNearWhichEdge(self.x_now, self.y_now) is not None and self.mousePressed is False) or (
    #                         self.transfm == 'affine start' and self.mousePressed):
    #                     self.graphicsView.viewport().setProperty("cursor", QCursor(QtCore.Qt.ClosedHandCursor))
    #                     self.label_cursor.setText('Affine')
    #                     if self.transfm == 'affine start':
    #                         self.paintRefLine('affine')
    #                 else:
    #                     self.graphicsView.viewport().setProperty("cursor", QCursor(QtCore.Qt.CrossCursor))
    #                     self.label_cursor.setText('')
    #
    #     # self.update()
    #
    # def cursorPressEvent(self, event):
    #     self.mousePressed = True
    #     self.x_start, self.y_start = event.x(), event.y()
    #     if self.mode == 0:  # add mode
    #         self.textBrowser_hist.append('Press: \t(%3d, %3d)' % (self.x_start, self.y_start))
    #     elif self.mode == 1:  # transform mode
    #         self.paintElements()
    #         if self.chosenEle is not None:
    #             '''when a rectangle have been chosen'''
    #
    #             # Transform: translate
    #             if self.isCursorOnCenter():
    #                 self.transfm = 'translate start'
    #                 # print('translate start')
    #
    #             elif self.CursorPosOnVertex() in ['LU', 'RD', 'LD', 'RU']:
    #
    #                 # Transform: project
    #                 if self.ctrlPressed:
    #                     self.transfm = 'project start'
    #                     # print('project start')
    #
    #                 # Transform: Scale
    #                 else:
    #                     self.transfm = 'scale start'
    #                     # print('scale start')
    #
    #             # Transform: Rotate
    #             elif self.isCursorAroundVertex() is True:
    #                 self.transfm = 'rotate start'
    #                 # print('rotate start')
    #
    #             # Transform: affine
    #             elif self.CursorNearWhichEdge(self.x_now, self.y_now) is not None:
    #                 self.transfm = 'affine start'
    #                 # print('affine start')
    #     # self.update()
    #
    # def cursorReleaseEvent(self, event):
    #     self.mousePressed = False
    #     self.x_end, self.y_end = event.x(), event.y()
    #     dx, dy = self.x_end - self.x_start, self.y_end - self.y_start
    #     if self.mode == 0:  # add mode
    #         self.textBrowser_hist.append('Release: \t(%3d, %3d)' % (self.x_end, self.y_end))
    #
    #         if self.x_start != self.x_end and self.y_start != self.y_end:
    #             self.elements.append(self.createRect(self.x_start, self.y_start, self.x_end, self.y_end))
    #
    #         self.graphicsView.viewport().setProperty("cursor", QCursor(QtCore.Qt.CrossCursor))
    #         self.x_start = self.y_start = None
    #     elif self.mode == 1:  # transfmorm mode
    #
    #         # Click to activate or deactivate an element
    #         if self.activeEle is not None and dx == 0 and dy == 0 and self.transfm is None:
    #             if self.chosenEle != self.activeEle:
    #                 self.chosenEle = self.activeEle
    #             else:
    #                 self.chosenEle = None
    #             self.textBrowser_hist.append('chosen: \t' + str(self.chosenEle))
    #
    #         # Transform: translate
    #         elif self.transfm == 'translate start':
    #             self.translate(self.x_start, self.y_start, self.x_end, self.y_end, self.elements[self.chosenEle])
    #             self.updateCenter()
    #             self.transfm = None
    #             # print('translate end')
    #
    #         # Transform: Scale
    #         elif self.transfm == 'scale start':
    #             self.scale(self.x_start, self.y_start, self.x_end, self.y_end, self.elements[self.chosenEle])
    #             self.transfm = None
    #             # print('scale end')
    #
    #         # Transform: project
    #         elif self.transfm == 'project start':
    #             self.project(self.x_start, self.y_start, self.x_end, self.y_end, self.elements[self.chosenEle])
    #             self.updateCenter()
    #             self.transfm = None
    #             # print('project end')
    #
    #         # Transform: rotate
    #         elif self.transfm == 'rotate start':
    #             self.rotate(self.x_start, self.y_start, self.x_end, self.y_end, self.elements[self.chosenEle])
    #             self.transfm = None
    #             # print('rotate end')
    #
    #         # Transform: affine
    #         elif self.transfm == 'affine start':
    #             self.affine(self.x_start, self.y_start, self.x_end, self.y_end, self.elements[self.chosenEle])
    #             self.updateCenter()
    #             self.transfm = None
    #             # print('affine end')
    #
    #     self.paintElements()
    #     self.updateElemList()
    #
    #     # self.update()

    # Drawing functions
    def paintElementLines(self, points, pen=QPen(QtCore.Qt.black)):
        for idx in range(0, 3):
            self.graphicsView.scene.addLine(
                QLineF(points[idx][0], points[idx][1], points[idx + 1][0], points[idx + 1][1]), pen=pen)
            self.graphicsView.scene.addLine(QLineF(points[3][0], points[3][1], points[0][0], points[0][1]), pen=pen)

    def paintElements(self):
        self.graphicsView.scene.clear()
        for item in self.elements:
            self.paintElementLines(item, pen=QPen(QtCore.Qt.blue))
        if self.chosenEle is not None:
            self.paintElementLines(self.elements[self.chosenEle], pen=QPen(QtCore.Qt.darkMagenta))
            self.graphicsView.scene.addEllipse(self.elements[self.chosenEle][4][0] - 3,
                                               self.elements[self.chosenEle][4][1] - 3, 6, 6,
                                               pen=QPen(QtCore.Qt.red))
        if self.activeEle is not None:
            if self.chosenEle == self.activeEle:
                self.paintElementLines(self.elements[self.activeEle], pen=QPen(QtCore.Qt.magenta))
            else:
                self.paintElementLines(self.elements[self.activeEle], pen=QPen(QtCore.Qt.green))

    def paintRefLine(self, transfm):
        pen = QPen(QtCore.Qt.gray)
        pen.setStyle(QtCore.Qt.DashLine)

        if transfm == 'create':
            if (self.x_last is not None) and (self.y_last is not None):
                elemnt = self.createRect(self.x_start, self.y_start, self.x_now, self.y_now)
                elemnt_last = self.createRect(self.x_start, self.y_start, self.x_last, self.y_last)
                self.paintElementLines(elemnt_last, pen=QPen(QtCore.Qt.white))
                self.paintElementLines(elemnt, pen=pen)

        elif transfm == 'translate':
            elemnt = copy.deepcopy(self.elements[self.chosenEle])
            elemnt_last = copy.deepcopy(elemnt)
            self.translate(self.x_start, self.y_start, self.x_last, self.y_last, elemnt_last)
            self.translate(self.x_start, self.y_start, self.x_now, self.y_now, elemnt)
            self.paintElementLines(elemnt_last, pen=QPen(QtCore.Qt.white))
            self.paintElementLines(elemnt, pen=pen)

        elif transfm == 'scale':
            elemnt = copy.deepcopy(self.elements[self.chosenEle])
            elemnt_last = copy.deepcopy(elemnt)
            self.scale(self.x_start, self.y_start, self.x_last, self.y_last, elemnt_last)
            self.scale(self.x_start, self.y_start, self.x_now, self.y_now, elemnt)
            self.paintElementLines(elemnt_last, pen=QPen(QtCore.Qt.white))
            self.paintElementLines(elemnt, pen=pen)

        elif transfm == 'project':
            elemnt = copy.deepcopy(self.elements[self.chosenEle])
            elemnt_last = copy.deepcopy(elemnt)
            self.project(self.x_start, self.y_start, self.x_last, self.y_last, elemnt_last)
            self.project(self.x_start, self.y_start, self.x_now, self.y_now, elemnt)
            self.paintElementLines(elemnt_last, pen=QPen(QtCore.Qt.white))
            self.paintElementLines(elemnt, pen=pen)

        elif transfm == 'rotate':
            elemnt = copy.deepcopy(self.elements[self.chosenEle])
            elemnt_last = copy.deepcopy(elemnt)
            self.rotate(self.x_start, self.y_start, self.x_last, self.y_last, elemnt_last)
            self.rotate(self.x_start, self.y_start, self.x_now, self.y_now, elemnt)
            self.paintElementLines(elemnt_last, pen=QPen(QtCore.Qt.white))
            self.paintElementLines(elemnt, pen=pen)

        elif transfm == 'affine':
            elemnt = copy.deepcopy(self.elements[self.chosenEle])
            elemnt_last = copy.deepcopy(elemnt)
            self.affine(self.x_start, self.y_start, self.x_last, self.y_last, elemnt_last)
            self.affine(self.x_start, self.y_start, self.x_now, self.y_now, elemnt)
            self.paintElementLines(elemnt_last, pen=QPen(QtCore.Qt.white))
            self.paintElementLines(elemnt, pen=pen)

        self.x_last = self.x_now
        self.y_last = self.y_now


    # def draw(self):
    #     pass
    #     pen = QPen(QtCore.Qt.black)
    #     brush = QBrush(QtCore.Qt.black)
    #     self.graphicsView.scene.addEllipse(x, y, 4, 4, pen, brush)
    #     pen = QPen(QtCore.Qt.green)
    #     brush = QBrush(QtCore.Qt.blue)
    #     self.graphicsView.scene.addRect(QRectF(x-3, y-3, 6, 6), pen=pen)
    #     self.graphicsView.scene.addEllipse(x, y, 4, 4, pen, brush)


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)

    myApp = MyWidget()
    myApp.show()
    sys.exit(app.exec_())
