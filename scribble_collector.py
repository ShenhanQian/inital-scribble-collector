import sys, copy
from PyQt5 import QtCore, QtWidgets
from PyQt5.Qt import QLineF, QPoint  # QRectF
from PyQt5.QtGui import QImage, QPixmap, QPen, QBrush, QPainter  # QCursor  # QPainter, QBrush
from scribble_collector_UI import Ui_Form  # import from the py file generated by Qt_Designer
import argparse
import json
import os
import os.path as ops
import time
import numpy as np
import cv2
from PIL import Image


class MyWidget(QtWidgets.QWidget, Ui_Form):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.initTempVar()
        self.afterGenerationConfig()

    def initTempVar(self):
        self.painting = False
        self.obj_num = 0
        self.obj_idx = 0

    def afterGenerationConfig(self):
        self.seq_idx = 0
        self.seq_dir = self.lineEdit_dataset_dir.text() + 'JPEGImages'
        self.seq_list = os.listdir(self.seq_dir)
        self.seq_num = len(self.seq_list)

        self.annot_dir = self.lineEdit_dataset_dir.text() + 'Annotations'
        self.annot_list = os.listdir(self.annot_dir)

        self.selectSeq()


        self.canvas.setMouseTracking(True)
        self.horizontalSlider.valueChanged.connect(self.loadImg)
        self.canvas.mouseMoveEvent = self.cursorMoveEvent
        self.canvas.mousePressEvent = self.cursorPressEvent
        self.canvas.mouseReleaseEvent = self.cursorReleaseEvent


        self.pushButton_seq_next.clicked.connect(self.nextSeq)
        self.pushButton_seq_back.clicked.connect(self.backSeq)
        self.pushButton_obj_next.clicked.connect(self.nextObj)
        self.pushButton_obj_back.clicked.connect(self.backObj)
        self.pushButton_rst.clicked.connect(self.reset)
        self.pushButton_save.clicked.connect(self.save)

# Image Processing and display
    def selectSeq(self):
        self.obj_idx = 0
        self.seq_name = self.seq_list[self.seq_idx]
        self.label_seq_name.setText('Sequence Name: ' + self.seq_name)
        self.updateFrame()

    def updateFrame(self):
        self.frame_dir = self.seq_dir + '/' + self.seq_name
        self.frame_list = os.listdir(self.frame_dir)
        self.frame_nums = len(self.frame_list)
        self.horizontalSlider.setMaximum(self.frame_nums - 1)


        self.annot_frame_dir = self.annot_dir + '/' + self.seq_name
        self.annot_frame_list = os.listdir(self.annot_frame_dir)
        self.annot_frame_nums = len(self.frame_list)

        assert self.frame_nums == self.annot_frame_nums

        self.label_obj.setText('Object ID: 0')

        self.loadImg()

    def loadImg(self):
        self.label_frame.setText('Frame: ' + str(self.horizontalSlider.value()))
        self.loadMask()
        try:
            mask = self.mask_list[self.obj_idx]
        except:
            mask = np.zeros((self.img.shape[0], self.img.shape[1]), dtype=np.uint8)
        inv_mask = cv2.bitwise_not(mask)

        img_path = self.frame_dir + '/' +self.frame_list[self.horizontalSlider.value()]
        img = cv2.imread(img_path)

        if self.obj_idx != 0:
            foreground = cv2.bitwise_and(img, img, mask=mask)
            background = cv2.bitwise_and(img, img, mask=inv_mask)
            self.img = cv2.addWeighted(foreground, 0.7, img, 0.3, 0)
        else:
            self.img = img
        self.updatePixmap()

    def loadMask(self):
        annot_frame_path = self.annot_frame_dir + '/' +self.annot_frame_list[self.horizontalSlider.value()]

        label = Image.open(annot_frame_path)
        label = np.array(label, dtype=np.uint8)
        self.obj_num = len(np.unique(label)) - 1

        self.mask_list = []
        for i in range(0, self.obj_num + 1):
            mask = np.array(label == i, dtype=np.uint8) * 255
            self.mask_list.append(mask)

    def updatePixmap(self):
        rgbImage = cv2.cvtColor(self.img, cv2.COLOR_BGR2RGB)
        convertToQtFormat = QImage(rgbImage.data, rgbImage.shape[1], rgbImage.shape[0],
                                   QImage.Format_RGB888)
        self.pixmap = QPixmap.fromImage(convertToQtFormat.scaledToHeight(self.canvas.height()))
        self.canvas.setPixmap(self.pixmap)

    def drawPoint(self, x, y):
        pen = QPen(QtCore.Qt.green)
        brush = QBrush(QtCore.Qt.green)

        painter = QPainter(self.pixmap)
        painter.setPen(pen)
        painter.setBrush(brush)
        painter.drawEllipse(x, y, 5, 5)
        self.canvas.setPixmap(self.pixmap)

# User Interface
    def nextSeq(self):
        if self.seq_idx < self.seq_num - 1:
            self.seq_idx += 1
        self.selectSeq()

    def backSeq(self):
        if self.seq_idx > 1:
            self.seq_idx -= 1
        self.selectSeq()

    def nextObj(self):
        if self.obj_idx < self.obj_num:
            self.obj_idx += 1
            self.label_obj.setText('Object ID: ' + str(self.obj_idx))
            self.loadImg()

    def backObj(self):
        if self.obj_idx > 0:
            self.obj_idx -= 1
            self.label_obj.setText('Object ID: ' + str(self.obj_idx))
            self.loadImg()

    def reset(self):
        self.loadImg()

    def save(self):
        pass


    # Callback functions
    def resizeEvent(self, event):
        self.updatePixmap()

    def cursorMoveEvent(self, event):
        x = event.x()
        y = event.y()
        self.label_x.setText('x:' + str(x))
        self.label_y.setText('y:' + str(y))

        if self.painting ==True:
            self.drawPoint(x, y)

    def cursorPressEvent(self, event):
        if self.obj_idx != 0:
            self.painting = True

    def cursorReleaseEvent(self, event):
        self.painting = False

    # Debug functions

    def imshow(self, im):
        cv2.imshow('0', im)
        cv2.waitKey(0)
        cv2.destroyAllWindows()



if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)

    myApp = MyWidget()
    myApp.show()
    sys.exit(app.exec_())
