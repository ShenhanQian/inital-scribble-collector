import sys, copy
from PyQt5 import QtCore, QtWidgets
from PyQt5.Qt import QLineF, QPoint  # QRectF
from PyQt5.QtGui import QImage, QPixmap, QPen, QBrush, QPainter  # QCursor  # QPainter, QBrush
from scribble_collector_UI import Ui_Form  # import from the py file generated by Qt_Designer
from math import atan, sin, cos, pi
import argparse
import json
import os
import os.path as ops
import time
# import shutil

import cv2

seq_dir = []
img_path = []

class MyWidget(QtWidgets.QWidget, Ui_Form):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.initTempVar()
        self.afterGenerationConfig()

    def initTempVar(self):
        self.painting = False
        self.canvasHeight = 400

    def afterGenerationConfig(self):
        self.seq_idx = 0
        self.seq_dir = self.lineEdit_dataset_dir.text() + 'JPEGImages'
        self.seq_list = os.listdir(self.seq_dir)
        self.seq_num = len(self.seq_list)

        self.selectSeq()

        self.canvas.setMouseTracking(True)
        self.horizontalSlider.valueChanged.connect(self.updateFrame)
        self.canvas.mouseMoveEvent = self.cursorMoveEvent
        self.canvas.mousePressEvent = self.cursorPressEvent
        self.canvas.mouseReleaseEvent = self.cursorReleaseEvent


        self.pushButton_seq_next.clicked.connect(self.nextSeq)
        self.pushButton_seq_back.clicked.connect(self.backSeq)
        self.pushButton_rst.clicked.connect(self.reset)
        self.pushButton_save.clicked.connect(self.save)

    def selectSeq(self):
        self.seq_name = self.seq_list[self.seq_idx]
        self.label_seq_name.setText('Sequence Name: ' + self.seq_name)
        self.updateFrame()

    def updateFrame(self):
        self.frame_dir = self.seq_dir + '/' + self.seq_name
        self.frame_list = os.listdir(self.frame_dir)
        self.frame_nums = len(self.frame_list)
        self.horizontalSlider.setMaximum(self.frame_nums - 1)
        self.label_frame.setText('Frame: ' + str(self.horizontalSlider.value()))
        self.loadImg()

    def loadImg(self):
        img_path = self.frame_dir + '/' +self.frame_list[self.horizontalSlider.value()]
        img = QImage(img_path)
        self.pixmap = QPixmap.fromImage(img.scaledToHeight(self.canvasHeight))
        self.canvas.setPixmap(self.pixmap)

    def nextSeq(self):
        if self.seq_idx < self.seq_num - 1:
            self.seq_idx += 1
        self.selectSeq()

    def backSeq(self):
        if self.seq_idx > 1:
            self.seq_idx -= 1
        self.selectSeq()

    def reset(self):
        self.loadImg()

    def save(self):
        pass

    def drawPoint(self, x, y):
        pen = QPen(QtCore.Qt.green)
        brush = QBrush(QtCore.Qt.green)

        painter = QPainter(self.pixmap)
        painter.setPen(pen)
        painter.setBrush(brush)
        painter.drawEllipse(x, y, 3, 3)
        self.canvas.setPixmap(self.pixmap)

    # Callback functions
    def resizeEvent(self, event):
        self.canvasHeight = self.canvas.height()
        self.loadImg()

    def cursorMoveEvent(self, event):
        x = event.x()
        y = event.y()
        self.label_x.setText('x:' + str(x))
        self.label_y.setText('y:' + str(y))

        if self.painting ==True:
            self.drawPoint(x, y)



    def cursorPressEvent(self, event):
        self.painting = True

    def cursorReleaseEvent(self, event):
        self.painting = False

    # Drawing functions



if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)

    myApp = MyWidget()
    myApp.show()
    sys.exit(app.exec_())
